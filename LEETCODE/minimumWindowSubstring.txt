# July 3 816p - need some serious studying - Minimum Window Substring
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if t == "": # edge case for empty string
            return ""

        countT, window = {}, {} # initialize both maps
        for c in t: # fill each map with the initial value
            countT[c] = 1 + countT.get(c, 0)

        have, need = 0, len(countT) # have = current values / need = needed values
        res, resLen = [-1, -1], float("infinity") # save the current window
        l = 0 # left side of window
        for r in range(len(s)): # loop thru s
            c = s[r] # right side of window
            window[c] = 1 + window.get(c, 0) # add in the current window add 1 + current number of duplicates

            if c in countT and window[c] == countT[c]: # if there is a match then increase have
                have += 1

            while have == need: # if have and need are the same then we need to see if theres a shorter string
                if (r - l + 1) < resLen: # if this window is shorter than previous smallest window
                    res = [l, r] # save the new window
                    resLen = r - l + 1

                window[s[l]] -= 1 
                if s[l] in countT and window[s[l]] < countT[s[l]]:
                    have -= 1
                l += 1
        l, r = res
        return s[l : r + 1] if resLen != float("infinity") else ""
