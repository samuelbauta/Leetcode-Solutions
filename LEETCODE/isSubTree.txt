# Samuel Bauta Sep17 1012p Subtree of a Binary Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:   
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        # if subRoot is null, a null tree is always a subtree of every tree
        if not subRoot: return True
        # if root is null then it has no subtrees if subroot was not null
        if not root: return False
        # run helper to see if subRoot is subtree of root
        if self.sameTree(root, subRoot):
            return True
        # otherwise keep running it down the children to account for left and right
        # subtrees of root that may be same as subroot
        return (self.isSubtree(root.left, subRoot) or
        self.isSubtree(root.right, subRoot))


    # basically same code as previous problem: is sameBinTree
    def sameTree(self, root, subRoot):
        if not root and not subRoot:
            return True

        if root and subRoot and root.val == subRoot.val:
            return (self.sameTree(root.left, subRoot.left) and
            self.sameTree(root.right, subRoot.right))

        return Falsee
