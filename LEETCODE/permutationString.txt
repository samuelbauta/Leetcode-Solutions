# July 3 1059a Permutation String - Sliding Window
# the way this algo works is imagine having 2 count maps
# map 1 counts all chars in s1 and map 2 counts all chars in map 2
# every loop we want to update count 2 with the chars in current window
# then we check each slot in both counts 1 -> 26 and see if they have the same counts
# we keep sliding the window till counts 1 -> 26 have exact matches
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False # edge case that s1 cannot be substring of s2

        s1Count, s2Count = [0] * 26, [0] * 26 # two arrays to keep track of char counts in each string
        for i in range(len(s1)):
            s1Count[ord(s1[i]) - ord('a')] += 1 # convert char into index
            s2Count[ord(s2[i]) - ord('a')] += 1
        
        matches = 0 # keeps track of how many matches between each letter entry in the string
        for i in range(26):
            matches += (1 if s1Count[i] == s2Count[i] else 0)
        
        l = 0
        for r in range(len(s1), len(s2)):
            if matches == 26: return True

            index = ord(s2[r]) - ord('a') # for right pointer
            s2Count[index] += 1 
            if s1Count[index] == s2Count[index]:
                matches += 1
            elif s1Count[index] + 1 == s2Count[index]:
                matches -= 1

            index = ord(s2[l]) - ord('a') # for left pointer
            s2Count[index] -= 1
            if s1Count[index] == s2Count[index]:
                matches += 1
            elif s1Count[index] - 1 == s2Count[index]:
                matches -= 1
            
            l += 1
        return matches == 26

