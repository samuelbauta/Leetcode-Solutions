# Samuel Bauta Sep17 1028p Lowest Common Ancestor in Binary Search Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:
        # basic binary search tree algo
        # loop until we hit return
        while True:
            # if root is less than both values move root down to the right
            if root.val < p.val and root.val < q.val:
                root = root.right
            # if root is more than both values move root to left
            elif root.val > p.val and root.val > q.val:
                root = root.left
            # if root is in between both values then we're at the correct root
            else:
                return root
            # this whole problem works like this because of how bst's work


