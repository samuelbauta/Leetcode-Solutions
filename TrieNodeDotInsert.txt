# Samuel Bauta Oct 14 10157a Design Word Search DS - Tries
class TrieNode:
    def __init__(self):
        self.children = {}  # a : TrieNode
        self.word = False


class WordDictionary:
    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        node = self.root
        # loop thru the word
        for c in word:
            # if char doesnt already exist then add it as usual
            if c not in node.children:
                node.children[c] = TrieNode()
            node = node.children[c]
            # set word to true since we inserted the whole word
        node.word = True

    def search(self, word: str) -> bool:
        # we want to do dfs so we can explore all potential
        # matches for the dots
        def dfs(j, root):
            node = root
            # go thru the word from j to end of word -> j for rec call
            for i in range(j, len(word)):
                c = word[i]
                # if we encounter dot then explore its paths
                if c == ".":
                    # go thru the potential children
                    for child in node.children.values():
                        # if we encounter non null child continue thru recursion
                        if dfs(i + 1, child):
                            return True
                    # otherwise terminate up
                    return False
                else:
                    # if we didnt have a dot then make sure its valid child
                    if c not in node.children:
                        return False
                    # if valid child continue down
                    node = node.children[c]
            # check if we are a successful word
            return node.word
        
        return dfs(0, self.root)

